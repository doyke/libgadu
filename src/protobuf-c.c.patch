--- protobuf-c.c.upstream	2016-02-02 20:09:01.000000000 +0000
+++ protobuf-c.c	2016-04-27 20:42:46.571173195 +0100
@@ -48,6 +48,9 @@
 #include <stdlib.h>	/* for malloc, free */
 #include <string.h>	/* for strcmp, strlen, memcpy, memmove, memset */
 
+/* Pull WORDS_BIGENDIAN etc */
+#include "config.h"
+
 #include "protobuf-c.h"
 
 #define TRUE				1
@@ -285,13 +288,13 @@
 {
 	if (v < 0) {
 		return 10;
-	} else if (v < (1UL << 7)) {
+	} else if (v < (1L << 7)) {
 		return 1;
-	} else if (v < (1UL << 14)) {
+	} else if (v < (1L << 14)) {
 		return 2;
-	} else if (v < (1UL << 21)) {
+	} else if (v < (1L << 21)) {
 		return 3;
-	} else if (v < (1UL << 28)) {
+	} else if (v < (1L << 28)) {
 		return 4;
 	} else {
 		return 5;
@@ -1761,9 +1764,11 @@
 	}
 	return rv;
 
+#if !defined(WORDS_BIGENDIAN)
 no_packing_needed:
 	buffer->append(buffer, rv, array);
 	return rv;
+#endif
 }
 
 static size_t
@@ -1796,7 +1801,7 @@
 		siz = sizeof_elt_in_repeated_array(field->type);
 		for (i = 0; i < count; i++) {
 			rv += required_field_pack_to_buffer(field, array, buffer);
-			array += siz;
+			array = ((char*)array) + siz;
 		}
 		return rv;
 	}
@@ -2078,6 +2083,10 @@
 								    latter_msg,
 								    fields[i].
 								    quantifier_offset);
+			protobuf_c_boolean need_to_merge = FALSE;
+			void *earlier_elem;
+			void *latter_elem;
+			const void *def_val;
 
 			if (fields[i].flags & PROTOBUF_C_FIELD_FLAG_ONEOF) {
 				if (*latter_case_p == 0) {
@@ -2099,12 +2108,11 @@
 				field = &fields[i];
 			}
 
-			protobuf_c_boolean need_to_merge = FALSE;
-			void *earlier_elem =
+			earlier_elem =
 				STRUCT_MEMBER_P(earlier_msg, field->offset);
-			void *latter_elem =
+			latter_elem =
 				STRUCT_MEMBER_P(latter_msg, field->offset);
-			const void *def_val = field->default_value;
+			def_val = field->default_value;
 
 			switch (field->type) {
 			case PROTOBUF_C_TYPE_MESSAGE: {
@@ -2487,6 +2495,7 @@
 					 *oneof_case);
 		const ProtobufCFieldDescriptor *old_field =
 			message->descriptor->fields + field_index;
+		size_t el_size = sizeof_elt_in_repeated_array(old_field->type);
 		switch (old_field->type) {
 	        case PROTOBUF_C_TYPE_STRING: {
 			char **pstr = member;
@@ -2516,7 +2525,6 @@
 			break;
 		}
 
-		size_t el_size = sizeof_elt_in_repeated_array(old_field->type);
 		memset (member, 0, el_size);
 	}
 	if (!parse_required_member (scanned_member, member, allocator, TRUE))
@@ -2925,6 +2933,8 @@
 		const ProtobufCFieldDescriptor *field;
 		ScannedMember tmp;
 
+		memset(&tmp, 0, sizeof(ScannedMember));
+
 		if (used == 0) {
 			PROTOBUF_C_UNPACK_ERROR("error parsing tag/wiretype at offset %u",
 						(unsigned) (at - data));
@@ -3070,6 +3080,7 @@
 					      field->quantifier_offset);
 			if (*n_ptr != 0) {
 				unsigned n = *n_ptr;
+				void *a;
 				*n_ptr = 0;
 				assert(rv->descriptor != NULL);
 #define CLEAR_REMAINING_N_PTRS()                                              \
@@ -3079,7 +3090,7 @@
                   if (field->label == PROTOBUF_C_LABEL_REPEATED)              \
                     STRUCT_MEMBER (size_t, rv, field->quantifier_offset) = 0; \
                 }
-				void *a = do_alloc(allocator, siz * n);
+				a = do_alloc(allocator, siz * n);
 				if (!a) {
 					CLEAR_REMAINING_N_PTRS();
 					goto error_cleanup;
@@ -3152,11 +3163,13 @@
 protobuf_c_message_free_unpacked(ProtobufCMessage *message,
 				 ProtobufCAllocator *allocator)
 {
+	const ProtobufCMessageDescriptor *desc;
+	unsigned f;
+
 	if (message == NULL)
 		return;
 
-	const ProtobufCMessageDescriptor *desc = message->descriptor;
-	unsigned f;
+	desc = message->descriptor;
 
 	ASSERT_IS_MESSAGE(message);
 
@@ -3245,6 +3258,8 @@
 protobuf_c_boolean
 protobuf_c_message_check(const ProtobufCMessage *message)
 {
+	unsigned i;
+
 	if (!message ||
 	    !message->descriptor ||
 	    message->descriptor->magic != PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC)
@@ -3252,7 +3267,6 @@
 		return FALSE;
 	}
 
-	unsigned i;
 	for (i = 0; i < message->descriptor->n_fields; i++) {
 		const ProtobufCFieldDescriptor *f = message->descriptor->fields + i;
 		ProtobufCType type = f->type;
@@ -3375,11 +3389,13 @@
 protobuf_c_enum_descriptor_get_value_by_name(const ProtobufCEnumDescriptor *desc,
 					     const char *name)
 {
+	unsigned start = 0;
+	unsigned count;
+
 	if (desc == NULL || desc->values_by_name == NULL)
 		return NULL;
 
-	unsigned start = 0;
-	unsigned count = desc->n_value_names;
+	count = desc->n_value_names;
 
 	while (count > 1) {
 		unsigned mid = start + count / 2;
@@ -3413,12 +3429,14 @@
 protobuf_c_message_descriptor_get_field_by_name(const ProtobufCMessageDescriptor *desc,
 						const char *name)
 {
+	unsigned start = 0;
+	unsigned count;
+	const ProtobufCFieldDescriptor *field;
+
 	if (desc == NULL || desc->fields_sorted_by_name == NULL)
 		return NULL;
 
-	unsigned start = 0;
-	unsigned count = desc->n_fields;
-	const ProtobufCFieldDescriptor *field;
+	count = desc->n_fields;
 
 	while (count > 1) {
 		unsigned mid = start + count / 2;
@@ -3455,11 +3473,13 @@
 protobuf_c_service_descriptor_get_method_by_name(const ProtobufCServiceDescriptor *desc,
 						 const char *name)
 {
+	unsigned start = 0;
+	unsigned count;
+
 	if (desc == NULL || desc->method_indices_by_name == NULL)
 		return NULL;
 
-	unsigned start = 0;
-	unsigned count = desc->n_methods;
+	count = desc->n_methods;
 
 	while (count > 1) {
 		unsigned mid = start + count / 2;
